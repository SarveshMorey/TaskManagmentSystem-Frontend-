{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(api, router) {\n    this.api = api;\n    this.router = router;\n    this.storageKey = 'tms_user';\n  }\n  currentUser() {\n    const raw = localStorage.getItem(this.storageKey);\n    return raw ? JSON.parse(raw) : null;\n  }\n  isLoggedIn() {\n    return !!this.currentUser();\n  }\n  login(email, password) {\n    return this.api.login(email, password).pipe(tap(user => localStorage.setItem(this.storageKey, JSON.stringify(user))), map(user => user), catchError(() => of(null)));\n  }\n  signup(data) {\n    return this.api.signup(data).pipe(tap(user => localStorage.setItem(this.storageKey, JSON.stringify(user))), map(user => user), catchError(() => of(null)));\n  }\n  logout() {\n    localStorage.removeItem(this.storageKey);\n    this.router.navigate(['/login']);\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAGrD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,GAAe,EAAUC,MAAc;IAAvC,QAAG,GAAHD,GAAG;IAAsB,WAAM,GAANC,MAAM;IAF3C,eAAU,GAAG,UAAU;EAE+B;EAE9DC,WAAW;IACT,MAAMC,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACC,UAAU,CAAC;IACjD,OAAOH,GAAG,GAAGI,IAAI,CAACC,KAAK,CAACL,GAAG,CAAS,GAAG,IAAI;EAC7C;EAEAM,UAAU;IACR,OAAO,CAAC,CAAC,IAAI,CAACP,WAAW,EAAE;EAC7B;EAEAQ,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACZ,GAAG,CAACU,KAAK,CAACC,KAAK,EAAEC,QAAQ,CAAC,CAACC,IAAI,CACzClB,GAAG,CAACmB,IAAI,IAAIV,YAAY,CAACW,OAAO,CAAC,IAAI,CAACT,UAAU,EAAEC,IAAI,CAACS,SAAS,CAACF,IAAI,CAAC,CAAC,CAAC,EACxEjB,GAAG,CAACiB,IAAI,IAAIA,IAAY,CAAC,EACzBlB,UAAU,CAAC,MAAMF,EAAE,CAAC,IAAI,CAAC,CAAC,CAC3B;EACH;EAEAuB,MAAM,CAACC,IAAmB;IACxB,OAAO,IAAI,CAAClB,GAAG,CAACiB,MAAM,CAACC,IAAI,CAAC,CAACL,IAAI,CAC/BlB,GAAG,CAACmB,IAAI,IAAIV,YAAY,CAACW,OAAO,CAAC,IAAI,CAACT,UAAU,EAAEC,IAAI,CAACS,SAAS,CAACF,IAAI,CAAC,CAAC,CAAC,EACxEjB,GAAG,CAACiB,IAAI,IAAIA,IAAY,CAAC,EACzBlB,UAAU,CAAC,MAAMF,EAAE,CAAC,IAAI,CAAC,CAAC,CAC3B;EACH;EAEAyB,MAAM;IACJf,YAAY,CAACgB,UAAU,CAAC,IAAI,CAACd,UAAU,CAAC;IACxC,IAAI,CAACL,MAAM,CAACoB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;;;uBAjCWvB,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAwB,SAAXxB,WAAW;MAAAyB,YADE;IAAM;EAAA","names":["of","tap","catchError","map","AuthService","constructor","api","router","currentUser","raw","localStorage","getItem","storageKey","JSON","parse","isLoggedIn","login","email","password","pipe","user","setItem","stringify","signup","data","logout","removeItem","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Downloads\\angular_tms_ready_with_auth\\tsm\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ApiService } from './api.service';\nimport { User } from '../models/task.model';\nimport { Observable, of } from 'rxjs';\nimport { tap, catchError, map } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private storageKey = 'tms_user';\n\n  constructor(private api: ApiService, private router: Router) {}\n\n  currentUser(): User | null {\n    const raw = localStorage.getItem(this.storageKey);\n    return raw ? JSON.parse(raw) as User : null;\n  }\n\n  isLoggedIn(): boolean {\n    return !!this.currentUser();\n  }\n\n  login(email: string, password: string): Observable<User | null> {\n    return this.api.login(email, password).pipe(\n      tap(user => localStorage.setItem(this.storageKey, JSON.stringify(user))),\n      map(user => user as User),\n      catchError(() => of(null))\n    );\n  }\n\n  signup(data: Partial<User>): Observable<User | null> {\n    return this.api.signup(data).pipe(\n      tap(user => localStorage.setItem(this.storageKey, JSON.stringify(user))),\n      map(user => user as User),\n      catchError(() => of(null))\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem(this.storageKey);\n    this.router.navigate(['/login']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}